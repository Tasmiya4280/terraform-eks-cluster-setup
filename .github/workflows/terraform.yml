name: Terraform

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:  # Allows manual triggers

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v4
        # Install Terraform
   # Install Terraform
    - name: Install Terraform
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get install terraform

    # Setup Terraform and AWS credentials
    - name: Set AWS Credentials
      run: |
        echo "AWS Access Key: ${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "AWS Secret Access Key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        echo "AWS Region: ${{ secrets.AWS_REGION }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      

    # Initialize Terraform working directory
    - name: Terraform Init
      run: terraform init
      env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       AWS_REGION: ${{ secrets.AWS_REGION }}

    # Create terraform.auto.tfvars dynamically using GitHub secrets
    - name: Create terraform.auto.tfvars
      run: |
       echo "vpc_cidr_block = \"${{ secrets.VPC_CIDR_BLOCK }}\"" > terraform.auto.tfvars
       echo "private_subnet_cidr_blocks = [$(echo '${{ secrets.PRIVATE_SUBNET_CIDR_BLOCKS }}' | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')]" >> terraform.auto.tfvars
       echo "public_subnet_cidr_blocks = [$(echo '${{ secrets.PUBLIC_SUBNET_CIDR_BLOCKS }}' | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')]" >> terraform.auto.tfvars



    # Format Terraform configuration
    - name: Terraform Format
      run: terraform fmt 

    # Generate an execution plan
    - name: Terraform Plan
      run: terraform plan
      env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       AWS_REGION: ${{ secrets.AWS_REGION }}

    # Apply Terraform plan to create/update infrastructure (Triggered manually or on push to main)
    - name: Terraform Apply
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve

    # Configure kubectl to connect to EKS
    - name: Set up kubectl for EKS
      run: |
        # Install AWS CLI if not already installed
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

        # Retrieve the EKS cluster credentials and configure kubectl
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    # Run kubectl command (for example, checking cluster nodes)
    - name: kubectl Get Nodes
      run: kubectl get nodes
